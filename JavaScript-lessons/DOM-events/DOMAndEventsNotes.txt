DOM and event notes:
Answer these questions after finishing.zzs

Explain what the DOM is in relation to a webpage.


Explain the difference between a “node” and an “element”.


Explain how to target nodes with “selectors”.


Explain the basic methods for finding/adding/removing and altering DOM nodes.


Explain the difference between a “nodelist” and an “array of nodes”.


Explain what “bubbling” is and how it works.


---------- Notes ----------
DOM stands for "document object model" and when your browser parses your html it builds the DOM which is a tree like structure with nodes
having different relationships.

you use selectors to target notes such as:
    div.display
    .display
    #container > .display
    div#container > div.display

DOM methods that allow you to retrieve elements using selectors:

    element.querySelector(selector) returns a reference to the first match of selector
    element.querySelectorAll(selectors) returns a “nodelist” containing references to all of the matches of the selectors
        ^^NOTE: querySelectorAll does not return an array but a node list. May be needed to convert it to a array using Array.from()

Element Creation

    document.createElement(tagName, [options]) creates a new element of tag type tagName. [options] in this case means you can add some optional parameters to the function. Don’t worry about these at this point.

Then to add elements to the DOM:

Append Elements

    parentNode.appendChild(childNode) appends childNode as the last child of parentNode
    parentNode.insertBefore(newNode, referenceNode) inserts newNode into parentNode before referenceNode

use textContent rather than innerhtml since innerhtml has some security risks

NOTE: 
    - When importing javascript in the head part of your html the javascript will run before the DOM 
    is loaded. So, if you try modifying it with the script being imported in the head section nothing 
    will happen. However, if you import it in the body after all the elements, you script will load after
    the DOM has loaded allowing you to access all the DOM elements.

    other solutions to the note above:
        - document.addEventListener("DOMContentLoaded"){},
        - <script src="somejs.js" defer></script> <-- this method loads the javascript once all content is done loading
        - <script async="somejs.js"></script> <-- this method fetches script without blocking the page however, once it is loaded 
        the script will execute which blocks the page from rendering.

    Some more notes from MDN:
        To summarize:
        async and defer both instruct the browser to download the script(s) in a separate thread, while the rest of the page (the DOM, etc.) is downloading, so the page loading is not blocked during the fetch process.
        scripts with an async attribute will execute as soon as the download is complete. This blocks the page and does not guarantee any specific execution order.
        scripts with a defer attribute will load in the order they are in and will only execute once everything has finished loading.
        If your scripts should be run immediately and they don't have any dependencies, then use async.
        If your scripts need to wait for parsing and depend on other scripts and/or the DOM being in place, load them using defer and put their corresponding <script> elements in the order you want the browser to execute them.




